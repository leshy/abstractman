// Generated by LiveScript 1.4.0
(function(){
  var Backbone, h, _, abstractMan, ubigraph;
  Backbone = require('backbone4000');
  h = require('helpers');
  _ = require('underscore');
  abstractMan = require('./index');
  ubigraph = require('ubigraph');
  exports.ubi = function(test){
    var A, B, C, gameSM, tournamentSM, roundSM;
    A = new abstractMan.DirectedGraphNode({
      name: 'A'
    });
    B = new abstractMan.DirectedGraphNode({
      name: 'B'
    });
    C = new abstractMan.DirectedGraphNode({
      name: 'C'
    });
    A.pushChild(B);
    B.pushChild(C);
    gameSM = exports.gameSM = abstractMan.StateMachine.extend4000({
      name: 'gameSM'
    });
    gameSM.defineStates({
      name: 'wait',
      children: {
        init: true,
        cancel: true
      }
    }, {
      name: 'cancel',
      child: 'end'
    }, {
      name: 'init',
      children: {
        run: true,
        error: true
      }
    }, {
      name: 'error',
      child: 'end'
    }, {
      name: 'run',
      children: {
        win: true,
        draw: true
      }
    }, {
      name: 'win',
      child: 'end'
    }, {
      name: 'draw',
      child: 'end'
    }, {
      name: 'end'
    });
    tournamentSM = exports.tournamentSM = abstractMan.StateMachine.extend4000({
      name: 'tournamentSM'
    });
    tournamentSM.defineStates({
      name: 'wait',
      child: 'run'
    }, {
      name: 'run',
      child: 'end'
    }, {
      name: 'end'
    });
    roundSM = exports.roundSM = abstractMan.StateMachine.extend4000({
      name: 'roundSM'
    });
    roundSM.defineStates({
      name: 'query',
      children: {
        init: true,
        end: true
      }
    }, {
      name: 'init',
      child: 'run'
    }, {
      name: 'run',
      child: 'checkRes'
    }, {
      name: 'checkRes',
      children: {
        next: true,
        end: true
      }
    }, {
      name: 'next',
      child: 'end'
    }, {
      name: 'end'
    });
    new gameSM().ubigraph('wait');
    new roundSM().ubigraph('query');
    new tournamentSM().ubigraph('wait');
    return test.done();
  };
  exports.stateMbasic = function(test){
    var Machine, statea, stated, machine;
    Machine = abstractMan.StateMachine.extend4000({
      name: 'test machine',
      start: 'state_a'
    });
    statea = Machine.defineState({
      name: 'state_a',
      children: ['state_b']
    });
    Machine.defineState({
      name: 'state_b',
      children: ['state_c']
    });
    Machine.defineState({
      name: 'state_c',
      children: ['state_a']
    });
    stated = statea.defineChild({
      name: 'state_d'
    });
    stated.addChild('state_a');
    machine = new Machine();
    machine.states.state_a.visit();
    machine.changeState('state_b');
    return test.done();
  };
  exports.stateMdefine = function(test){
    var Machine, machine;
    Machine = abstractMan.StateMachine.extend4000({
      name: 'test machine',
      start: 'state_a',
      states: {
        state_a: {
          child: 'state_b'
        },
        state_b: true
      }
    });
    machine = new Machine();
    machine.states.state_a.visit();
    machine.states.state_a.changeState('state_b');
    return test.done();
  };
}).call(this);
