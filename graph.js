// Generated by LiveScript 1.4.0
(function(){
  var Backbone, h, _, metaPlug, GraphNode, DirectedGraphNode;
  Backbone = require('backbone4000');
  h = require('helpers');
  _ = require('underscore');
  metaPlug = function(cls){
    var makePlugFunctions, this$ = this;
    makePlugFunctions = function(options, name){
      if (options.constructor !== Object) {
        options = {};
      }
      options = _.extend({
        singular: name
      }, options);
      cls.prototype['push' + h.capitalize(options.singular)] = cls.prototype['push' + h.capitalize(name)] = cls.prototype['add' + h.capitalize(options.singular)] = cls.prototype['add' + h.capitalize(name)] = function(obj){
        return this.plugPush(name, obj);
      };
      cls.prototype['pop' + h.capitalize(options.singular)] = function(obj){
        return this.plugPop(name, obj);
      };
      return cls.prototype['get' + h.capitalize(name)] = function(obj){
        return this.plugGet(name);
      };
    };
    if (cls.prototype.plugs) {
      h.dictMap(cls.prototype.plugs, makePlugFunctions);
    }
    return cls;
  };
  GraphNode = exports.GraphNode = Backbone.Model.extend4000({
    name: 'graphnode',
    mergers: [Backbone.metaMerger.mergeDict('plugs')],
    transformers: [metaPlug],
    initialize: function(options){
      var this$ = this;
      if (options.name) {
        this.name = options.name;
      }
      return this.plugs = h.dictmap(this.plugs || {}, function(options, name){
        var c;
        c = new Backbone.Collection();
        if (this$[name]) {
          this$["_" + name] = this$[name];
        }
        this$[name] = c;
        return c;
      });
    },
    plugPush: function(plug, obj){
      return this.plugs[plug].push(obj);
    },
    plugPop: function(plug){
      return this.plugs[plug].pop();
    },
    plugGet: function(plug){
      return this.plugs[plug].models;
    }
  });
  DirectedGraphNode = exports.DirectedGraphNode = GraphNode.extend4000({
    plugs: {
      parents: {
        singular: 'parent'
      },
      children: {
        singular: 'child'
      }
    }
  });
}).call(this);
