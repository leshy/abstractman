// Generated by LiveScript 1.4.0
(function(){
  var graph, _, Backbone, h, State, StateMachine;
  graph = require('./graph');
  _ = require('underscore');
  Backbone = require('backbone4000');
  h = require('helpers');
  State = exports.State = graph.DirectedGraphNode.extend4000({
    defaults: {
      name: 'unnamed',
      visited: false,
      active: false
    },
    name: function(){
      return this.get('name');
    },
    initialize: function(options){
      var this$ = this;
      _.extend(this, options);
      return this.root.when('ready', function(){
        if (this$.child) {
          this$._children = h.push(this$._children, this$.child);
        }
        return _.map(this$._children || [], function(it){
          return this$.addChild(this$.root.states[it]);
        });
      });
    },
    changeState: function(name){
      var newState;
      if ((name != null ? name.constructor : void 8) === String) {
        newState = this.children.find(function(state){
          return state.name === name;
        });
      } else {
        newState = name;
      }
      if (!newState) {
        return console.log("WARNING: state with name " + name + " not found in my children (" + this.name + ")");
      }
      console.log('changestate!', newState.name);
      this.leave();
      return newState.visit();
    },
    leave: function(){
      this.set({
        active: false
      });
      return this.trigger('leave');
    },
    visit: function(){
      console.log('state', this.name, 'is now active');
      this.set({
        visited: true,
        active: true
      });
      this.trigger('visit');
      this.root.set({
        state: this
      });
      return this.root.trigger('changeState');
    }
  });
  StateMachine = exports.StateMachine = Backbone.Model.extend4000({
    stateClass: State,
    initialize: function(options){
      var this$ = this;
      this.states = h.dictMap(this.states || {}, function(state, name){
        return new state({
          root: this$
        });
      });
      this.on('change:state', function(model, state){
        return this$.state = state;
      });
      this.set({
        ready: true
      });
      if (this.start) {
        return this.states[this.start].visit();
      }
    },
    changeState: function(name){
      console.log('root changestate', name);
      return this.state.changeState(name);
    },
    ubigraph: function(stateName){
      var dontbrowserify, ubi;
      stateName == null && (stateName = this.start);
      dontbrowserify = 'ubigraph';
      ubi = require(dontbrowserify);
      return ubi.visualize(this.states[stateName], function(node){
        return node.getChildren();
      }, function(node){
        return node.name;
      });
    }
  });
  StateMachine.defineState = function(name, stateClass){
    stateClass || (stateClass = {});
    stateClass = this.prototype.stateClass.extend4000(stateClass, {
      name: name,
      rootClass: this
    });
    if (!this.prototype.states) {
      this.prototype.states = {};
    }
    return this.prototype.states[name] = stateClass;
  };
  State.defineChild = function(name, cls){
    var newState;
    this.addChild(name);
    newState = this.prototype.rootClass.defineState(name, cls);
    return newState;
  };
  State.addChild = function(name){
    return this.prototype.children = h.push(this.prototype.children, name);
  };
}).call(this);
