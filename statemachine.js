// Generated by LiveScript 1.4.0
(function(){
  var graph, _, State, StateMachine;
  graph = require('./graph');
  _ = require('underscore');
  State = exports.State = graph.DirectedGraphNode.extend4000({
    defaults: {
      name: 'unnamed',
      visited: false,
      active: false
    },
    name: function(){
      return this.get('name');
    },
    child: function(options){
      var child;
      child = new this.parent.State(options);
      return child.setParent(this);
    },
    initialize: function(options){
      if (options.check) {
        this.check = options.check;
      }
      if (options.name) {
        return this.set({
          name: options.name
        });
      }
    },
    visit: function(){
      this.set({
        visited: true,
        active: true
      });
      this.trigger('visit');
      this.parent.set({
        state: this
      });
      return this.parent.trigger('changeState');
    }
  });
  StateMachine = exports.StateMachine = graph.GraphNode.extend4000({
    plugs: {
      states: {
        singular: 'state'
      }
    },
    initialize: function(){
      var this$ = this;
      _.map(this.states, function(state){
        return this$.names[state.name()] = state;
      });
      this.states.on('remove', function(state){
        var ref$, key$, ref1$;
        return ref1$ = (ref$ = this$.names)[key$ = state.name()], delete ref$[key$], ref1$;
      });
      this.states.on('add', function(state){
        return this$.names[state.name()] = state;
      });
      return this.State = State.extend4000({
        parent: this
      });
    },
    changeState: function(state){
      if (state.constructor === String) {
        return this.names[state].visit();
      } else {
        return state.visit();
      }
    }
  });
}).call(this);
